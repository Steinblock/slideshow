@model SlideViewModel

@{
//ViewData["Title"] = "Edit Section";
}

<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>


<form method="post" id="edit-form" class="form-horizontal">

    <partial name="_ModalBegin" />

    @Html.HiddenFor(x => x.Id)

    <div class="form-group">
        @Html.LabelFor(x => x.Name, new { @class = "col-sm-4 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(x => x.Name, new { @class = "form-control", id = "name" })
            @Html.ValidationMessageFor(x => x.Name)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.Header, new { @class = "col-sm-4 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(x => x.Header, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Header)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.Template, new { @class = "col-sm-4 control-label" })
        <div class="col-sm-4">
            @Html.TextBoxFor(x => x.Template, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Template)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.Content, new { @class = "col-sm-4 control-label" })
        <div class="col-sm-8">
            @Html.TextAreaFor(x => x.Content, new { @class = "form-control", rows = "10" })
            @Html.ValidationMessageFor(x => x.Content)
        </div>
    </div>

    @Html.HiddenFor(x => x.Order)


    @if (!"XMLHttpRequest".Equals(Context.Request.Headers["x-requested-with"].FirstOrDefault(), StringComparison.OrdinalIgnoreCase))
    {
        <div class="form-group">
            <div class="col-sm-offset-4 col-sm-4">
                <button type="submit" id="btn-edit-save" class="btn btn-primary btn-default">Save</button>
            </div>
        </div>
    }

    <partial name="_ModalEnd" />

</form>